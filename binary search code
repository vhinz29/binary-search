import random
import time

index = [1, 3, 5, 10, 12]
global minus, plus
minus ,plus  = 0, len(index) - 1
def total_search():
    naive_no = (naive_search(index, index_num))
    if naive_no[1] in index:
        print("\nnaive search  => ", naive_no[0])
        print("binary search => ", binary_search(index, index_num,plus, minus))
        search_time()
    else:
        print('Invalid Entry')

def naive_search(index, index_num):
    for i in range(len(index)):
        if index_num == index[i]:
            return i, index[i]
    return -1, -1
def binary_search(index, index_num,plus, minus):
    if plus >= minus:
        midpoint = (minus + plus) // 2
        if index[midpoint] == index_num:
            return midpoint
        elif index[midpoint] > index_num:
            plus -= 1
            return binary_search(index, index_num,plus, minus)
        elif index[midpoint] < index_num:
            minus += 1
            return binary_search(index, index_num,plus, minus)
def search_time():
    length = 1000
    sorted_list = set()

    while len(sorted_list) < length:
        sorted_list.add(random.randint(-3 * length, 3 * length))
    sorted_list = sorted(list(sorted_list))

    start = time.time()
    for index_num in sorted_list:
        naive_search(sorted_list, index_num)
    end = time.time()
    print("naive search time:  ", (end - start) / length, "seconds")

    start = time.time()
    for index_num in sorted_list:
        binary_search(index, index_num,plus, minus)
    end = time.time()
    print("binary search time: ", (end - start) / length, "seconds")


print(index)
index_num = input("enter a number search :> ", )
if index_num.isnumeric() == True:
    index_num = int(index_num)
    total_search()
else:
    print('invalid entry')
